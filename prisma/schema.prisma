// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id           String       @id @default(cuid())
  displayName  String // Human-readable name (e.g., "Store Manager")
  roleName     String       @unique // System name (e.g., "store_manager")
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId        String 
  description  String?
  permissions  String[] // Array of permission strings
  users        User[]       @relation("UserRoles")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([roleName])
}

model User {
  id            String       @id @default(cuid())
  name          String
  firstName     String
  lastName      String
  phone         String       @unique
  email         String       @unique
  emailVerified DateTime?
  image         String?
  jobTitle      String?
  roles         Role[]       @relation("UserRoles") // Updated to support multiple roles
  password      String?
  status        Boolean      @default(true)
  accounts      Account[]
  sessions      Session[]
  orgName       String?
  organization  Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId         String
  location      Location?    @relation(fields: [locationId], references: [id])
  locationId    String?
  locationName  String?
  isVerfied     Boolean      @default(false)
  token         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  roleId        String?

  //Relationship for transactions
  createdPurchaseOrders PurchaseOrder[] @relation("PurchaseOrderCreatedBy")
  approvedPurchaseOrders PurchaseOrder[] @relation("PurchaseOrderApprovedBy")
  createdTransfers       Transfer[] @relation ("TransferCreatedBy")
  approvedTransfers       Transfer[] @relation ("TransferApprovedBy")
  createdSalesOrders      SalesOrder[] @relation ("SalesOrderCreatedBy")
  createdAdjustments      Adjustment[] @relation ("AdjustmentCreatedBy")
  approvedAdjustments      Adjustment[] @relation ("AdjustmentApprovedBy")
  receivedGoodsReceipts  GoodsReceipt[] @relation ("GoodsReceiptReceivedBy")
}
model Organization {
  id                 String     @id @default(cuid())
  name               String
  slug               String     @unique
  industry           String?
  country            String?
  state              String?
  address            String?
  currency           String?
  timeZone           String?
  inventory          Inventory[] // Assuming this is a boolean flag, adjust if needed
  startDate          DateTime?
  inventoryStartDate DateTime?
  fiscalYear         String?
  users              User[]
  units              Unit[]
  categories         Category[]
  invites            Invite[]
  items              Item[]
  locations          Location[]
  brands             Brand[]
  taxRates              TaxRate[]
  suppliers          Supplier[]
  purchaseOrders      PurchaseOrder[]
  salesOrders         SalesOrder[]
  transfers          Transfer[]
  adjustments         Adjustment[]
  customers           Customer[]
  goodsReceipts     GoodsReceipt[]
  role               Role[]
  apiKeys             ApiKey[]
 
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  @@map("organizations") // Maps to "organizations" table in the database [^1]
}
model Invite {
  id           String       @id @default(cuid())
  email        String       @unique
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId        String
  status       Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("invites")
}
model ApiKey {
  id        String       @id @default(cuid())
  orgId     String
  key       String       @unique
  name      String
  createdAt DateTime     @default(now())
  org       Organization @relation(fields: [orgId], references: [id])
} 
model Location {
  id           String       @id @default(cuid())
  name         String
  type         LocationType
  address      String?
  phone        String?
  email        String?
  isActive     Boolean      @default(true)
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId        String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  //Relationships
  users        User[]
  inventories   Inventory[]
  incomingTransfers Transfer[] @relation("ToLocation")
  outgoingTransfers Transfer[] @relation("FromLocation")
  purchaseOrders PurchaseOrder[] @relation("DeliveryLocation")
  salesOrders   SalesOrder[]   @relation("SalesLocation")
  goodsReceipts GoodsReceipt[]
  adjustments Adjustment[]
}
enum LocationType {
  WAREHOUSE
  SHOP
  VIRTUAL
}
model Category {
  id            String       @id @default(cuid())
  title         String
  slug          String       @unique
  imageUrl      String?
  description   String?
  parentId      String?
  parent        Category?    @relation("SubCategories", fields: [parentId], references: [id])
  subCategories Category[]   @relation("SubCategories")
  items         Item[]
  organization  Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId         String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Unit {
  id           String       @id @default(cuid())
  name         String
  symbol       String
  items        Item[]
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId        String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}
model Brand {
  id           String       @id @default(cuid())
  name         String
  slug         String       @unique
  items        Item[]
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId        String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model TaxRate {
  id           String       @id @default(cuid())
  name         String
  rate         Float
  items        Item[]
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId        String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Item {
  id                String         @id @default(cuid())
  name              String
  slug              String         @unique
  sku               String         @unique
  barcode           String?        @unique
  description       String?
  dimensions        String?
  weight            Float?
  salesCount  Int      @default(0)
  salesTotal  Float    @default(0)
  upc               String? //Twelve digit unique number associated with the bar code (Universal Product Code)
  ean               String? //Thirteen digit unique number (International Article Number)
  mpn               String? //Manufacturing Part Number unambiguously identifies a part design
  isbn              String? //Thirteen digit unique commercial book identifier (International Standard Book Number)
  thumbnail         String? @default("https://ji20b9tl3i.ufs.sh/f/pQAi6smwGNu2vALIcZP5Uyvn7WAtB6Rb93aC4zgXOMN1lwke")
  imageUrls         String[]
  categoryId        String?
  category          Category?      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  taxRateId         String?
  organization      Organization   @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId             String
  tax               Float?         @default(0) //tax rate
  taxRate           TaxRate?       @relation(fields: [taxRateId], references: [id])
  brandId           String?
  brand             Brand?         @relation(fields: [brandId], references: [id])
  unitId            String?
  unit              Unit?          @relation(fields: [unitId], references: [id], onDelete: Cascade)
  unitOfMeasure     String? //unit name
  costPrice         Float          @default(0)
  sellingPrice      Float          @default(0)
  minStockLevel     Int            @default(0)
  maxStockLevel     Int?
  isActive          Boolean        @default(true)
  isSerialTracked   Boolean        @default(false)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  //Relationship
  inventories   Inventory[]
  serialNumbers     SerialNumber[]
  suppliers         Supplier[]     @relation("SupplierItems")
  supplierRelations ItemSupplier[] // New relation
  purchaseOrderLines PurchaseOrderLine[]
  salesOrderLines SalesOrderLine[]
  transferLines  TransferLine[]
  adjustmentLines AdjustmentLine[]
  goodsReceiptLines GoodsReceiptLine[]
}

model Supplier {
  id                String         @id @default(cuid())
  name              String
  contactPerson     String?
  email             String?
  phone             String?
  address           String?
  taxId             String?
  organization      Organization   @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId             String
  paymentTerms      Int? // Days
  notes             String?
  isActive          Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  //Relationship
  items             Item[]         @relation("SupplierItems")
  supplierRelations ItemSupplier[] // New relation
  purchaseOrders PurchaseOrder[]
}
model ItemSupplier {
  id               String    @id @default(cuid())
  itemId           String
  item             Item      @relation(fields: [itemId], references: [id])
  supplierId       String
  supplier         Supplier  @relation(fields: [supplierId], references: [id])
  isPreferred      Boolean   @default(false)
  supplierSku      String? // Supplier's own SKU for this item
  leadTime         Int? // Typical lead time in days
  minOrderQty      Int? // Minimum order quantity
  unitCost         Float? // Supplier-specific cost
  lastPurchaseDate DateTime?
  notes            String?

  @@unique([itemId, supplierId])
}

model Inventory{
  id            String      @id @default(cuid())
  itemId        String
  item          Item        @relation(fields: [itemId], references: [id])
  locationId    String
  location      Location    @relation(fields: [locationId], references: [id])
  quantity      Int         @default(0)
  reservedQuantity  Int     @default(0)
  organization      Organization    @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId             String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@unique([itemId, locationId])
  @@index([itemId])
  @@index(locationId)

}
// Serial number tracking
model SerialNumber {
  id              String       @id @default(cuid())
  serialNumber    String       @unique
  itemId          String
  item            Item         @relation(fields: [itemId], references: [id])
  status          SerialStatus @default(IN_STOCK)
  locationId      String?
  purchaseOrderId String?
  salesOrderId    String?
  notes           String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}


enum SerialStatus {
  IN_STOCK
  SOLD
  RESERVED
  DAMAGED
  RETURNED
}

model PurchaseOrder{
  id              String               @id @default(cuid())
  poNumber        String               @unique
  date            DateTime
  supplierId      String
  supplierName     String?
  supplier        Supplier             @relation(fields: [supplierId], references:[id])
  deliveryLocationId String
  deliveryLocation       Location             @relation("DeliveryLocation", fields: [deliveryLocationId], references:[id])
  status          PurchaseOrderStatus @default(DRAFT)
  subtotal        Float               @default(0)
  taxAmount       Float               @default(0)
  shippingCost    Float?
  discount        Float?
  total           Float               @default(0)
  notes           String?
  paymentTerms    String?
  expectedDeliveryDate DateTime?
  organization    Organization        @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId           String
  createdById     String
  CreatedBy       User              @relation("PurchaseOrderCreatedBy", fields:[createdById], references: [id])
  approvedById    String?
  approvedBy       User?              @relation("PurchaseOrderApprovedBy", fields:[approvedById], references: [id])
  lines           PurchaseOrderLine[]
  goodsReceipts   GoodsReceipt[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([poNumber])
  @@index(supplierId)
  @@index([status])

}

enum PurchaseOrderStatus{
  DRAFT
  SUBMITTED
  APPROVED
  PARTIALLY_RECEIVED
  RECEIVED
  CANCELLED
  CLOSED

}

model PurchaseOrderLine{
  id            String          @id @default(cuid())
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields:[purchaseOrderId], references: [id], onDelete: Cascade)
  itemId  String
  item        Item              @relation(fields: [itemId], references: [id])
  quantity        Int
  unitPrice       Float
  taxRate         Float         @default(0)
  taxAmount       Float         @default(0)
  discount        Float?
  total           Float
  notes           String?
  receivedQuantity  Int         @default(0)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  goodsReceiptLines GoodsReceiptLine[]

  @@index([purchaseOrderId])
  @@index([itemId])


}
model GoodsReceipt{
  id          String              @id @default(cuid())
  receiptNumber String            @unique
  date          DateTime
  purchaseOrderId String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references:[id])
  locationId      String
  location   Location @relation(fields: [locationId], references:[id])
  status          GoodsReceiptStatus @default(PENDING)
  notes           String?
  organization   Organization @relation(fields: [orgId], references:[id], onDelete: Cascade)
  orgId           String
  receivedById    String
  receivedBy      User @relation("GoodsReceiptReceivedBy", fields: [receivedById], references:[id])
  lines           GoodsReceiptLine[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  

  @@index([receiptNumber])
  @@index([purchaseOrderId])
  @@index([status])


}

enum GoodsReceiptStatus{
  PENDING
  COMPLETED
  CANCELLED
}
model GoodsReceiptLine{
  id          String         @id @default(cuid())
  goodsReceiptId String
  goodsReceipt GoodsReceipt @relation(fields: [goodsReceiptId], references:[id], onDelete: Cascade)
  purchaseOrderLineId String
  purchaseOrderLine PurchaseOrderLine @relation(fields: [purchaseOrderLineId], references:[id])
  itemId  String 
  item     Item       @relation(fields: [itemId], references:[id])
  receivedQuantity  Int
  notes         String?
  serialNumbers     String[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([goodsReceiptId])
  @@index([purchaseOrderLineId])
  @@index([itemId])
}

//======Sales Models======

model Customer{
  id          String              @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  taxId       String?
  notes       String?
  isActive    Boolean    @default(true)
  organization  Organization @relation(fields: [orgId], references:[id], onDelete: Cascade)
  orgId       String
  salesOrders SalesOrder[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([email])
  @@index([phone])

}

model SalesOrder{
  id          String              @id @default(cuid())
  orderNumber String              @unique
  date        DateTime
  customerId   String?
  customer     Customer? @relation(fields: [customerId], references:[id])
  locationId    String
  location     Location @relation("SalesLocation",fields: [locationId], references:[id])
  status      SalesOrderStatus @default(DRAFT)
  subtotal    Float @default(0)
  taxAmount   Float @default(0)
  shippingCost  Float?
  discount      Float?
  total        Float @default(0)
  paymentStatus PaymentStatus   @default(PENDING)
  paymentMethod String?
  notes       String?
  organization  Organization  @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId       String
  createdById String  @unique
  createdBy   User        @relation("SalesOrderCreatedBy", fields: [createdById], references: [id])
  lines SalesOrderLine[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([orderNumber])
  @@index([customerId])
  @@index([status])
  @@index([paymentStatus])


}

enum SalesOrderStatus{
  DRAFT
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELED
  RETURNED

}

enum PaymentStatus{
  PENDING
  PARTIAL
  PAID
  REFUNDED
}

model SalesOrderLine {
  id          String   @id @default(cuid())
  salesOrderId  String
  salesOrder SalesOrder @relation(fields: [salesOrderId], references: [id], onDelete: Cascade)
  itemId    String
  item  Item @relation(fields: [itemId], references: [id])
  quantity  Int
  unitPrice Float
  taxRate Float  @default(0)
  taxAmount Float @default(0)
  discount Float?
  total Float
  serialNumbers String[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  @@index([salesOrderId])
  @@index([itemId])


}

//====Stock Movement Models =====

model Transfer{
  id          String   @id @default(cuid())
  transferNumber  String @unique
  date    DateTime
  fromLocationId  String
  fromLocation Location @relation("FromLocation",fields: [fromLocationId], references: [id])
  toLocationId  String
  toLocation Location @relation("ToLocation",fields: [toLocationId], references: [id])
  status  TransferStatus  @default(DRAFT)
  notes   String?
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId String
  createdById String
  createdBy User @relation("TransferCreatedBy",fields: [createdById], references: [id])
  approvedById  String?
  approvedBy User? @relation("TransferApprovedBy",fields: [approvedById], references: [id])
  lines TransferLine[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  @@index([transferNumber])
  @@index([fromLocationId])
  @@index([toLocationId])
  @@index([status])


}

enum TransferStatus{
  DRAFT
  APPROVED
  IN_TRANSIT
  COMPLETED
  CANCELED
}

model TransferLine{
  id          String   @id @default(cuid())
  transferId  String
  transfer Transfer @relation(fields: [transferId], references: [id], onDelete: Cascade)
  itemId     String
  item Item @relation(fields: [itemId], references: [id])
  quantity  Int
  notes String?
  serialNumbers String[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt


  @@index([transferId])
  @@index([itemId])

}

model Adjustment{
  id          String   @id @default(cuid())
  adjustmentNumber String   @unique
  date    DateTime
  locationId  String
  location Location @relation(fields: [locationId], references: [id])
  adjustmentType  AdjustmentType
  reason  String
  notes String?
  status  AdjustmentStatus  @default(DRAFT)
  organization  Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId  String
  createdById String
  createdBy User @relation("AdjustmentCreatedBy",fields: [createdById], references: [id])
  approvedById  String?
  approvedBy  User? @relation("AdjustmentApprovedBy",fields: [approvedById],references: [id])
  lines AdjustmentLine[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([adjustmentNumber])
  @@index([locationId])
  @@index([adjustmentType])
  @@index([status])


}

enum AdjustmentType{
  STOCK_COUNT
  DAMAGE
  THEFT
  EXPIRED
  OTHER
}
enum AdjustmentStatus{
  DRAFT
  APPROVED
  COMPLETED
  CANCELED
}

model AdjustmentLine{
  id          String   @id @default(cuid())
  adjustmentId  String
  adjustment Adjustment @relation(fields: [adjustmentId], references: [id], onDelete: Cascade)
  itemId    String
  item Item @relation(fields: [itemId], references: [id])
  beforeQuantity  Int
  afterQuantity  Int
  adjustedQuantity  Int
  notes   String
  serialNumbers String[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([adjustmentId])
  @@index([itemId])
}

